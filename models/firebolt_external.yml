version: 2

sources:
  - name: firebolt_external
    schema: "{{ target.schema }}"
    loader: S3

    tables:
      - name: people_csv_unpartitioned
        external: &csv-people
          url: s3://fishtown-copy/csv/
          object_pattern: "*.csv"
          type: "(CSV SKIP_HEADER_ROWS=1)"
        columns: &cols-of-the-people
          - name: id
            data_type: int
          - name: first_name
            data_type: TEXT
          - name: last_name
            data_type: TEXT
          - name: email
            data_type: TEXT
        tests: &equal-to-the-people
          - dbt_utils.equality:
              compare_model: ref('people')
              compare_columns:
                - id
                - first_name
                - last_name
                - email

      - name: people_csv_partitioned
        external:
          <<: *csv-people
          partitions: &parts-of-the-people
            - name: section
              data_type: TEXT
              regex: "csv/section=(\\w{1}).*"
        columns: *cols-of-the-people
        tests: *equal-to-the-people

      # # ensure that all partitions are created
      # - name: people_csv_multipartitioned
      #   external:
      #     <<: *csv-people
      #     location: "s3://dbt-external-tables-testing/"
      #     partitions:
      #       - name: file_format
      #         data_type: varchar
      #         vals: ['csv', 'json']
      #         path_macro: dbt_external_tables.value_only
      #       - name: section
      #         data_type: varchar
      #         vals: ['a','b','c','d']
      #         path_macro: dbt_external_tables.key_value
      #       - name: some_date
      #         data_type: date
      #         vals:
      #           macro: dbt.dates_in_range
      #           args:
      #             start_date_str: '2020-01-01'
      #             end_date_str: '2020-02-01'
      #             in_fmt: "%Y-%m-%d"
      #             out_fmt: "%Y-%m-%d"
      #         path_macro: dbt_external_tables.year_month_day
      #       - name: file_name
      #         data_type: varchar
      #         vals: ['people', 'not_people']
      #         path_macro: dbt_external_tables.value_only
      #   columns: *cols-of-the-people

      # - name: people_json_unpartitioned
      #   external: &json-people
      #     location: "s3://dbt-external-tables-testing/json/"
      #     row_format: "serde 'org.openx.data.jsonserde.JsonSerDe'
      #       with serdeproperties (
      #           'strip.outer.array'='false'
      #       )"
      #   columns: *cols-of-the-people
      #   tests: *equal-to-the-people

      # - name: people_json_partitioned
      #   external:
      #     <<: *json-people
      #     partitions: *parts-of-the-people
      #   columns: *cols-of-the-people
      #   tests: *equal-to-the-people
